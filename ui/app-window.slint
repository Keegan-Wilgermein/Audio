import { ScrollView } from "std-widgets.slint";

export component AppWindow inherits Window {
    // Window setup and settings
    title: "audio";

    // -------- Variables --------
    private property <[[string]]> dials: [["Sub Bass", "Bass", "Mids"], ["Vocals", "Treble", "Pan"]];
    out property <bool> dials_edited: false;

    in-out property <bool> started: true;

    in-out property <[string]> preset_names: [];
    in-out property <[[int]]> preset_values: [];
    out property <bool> new_preset: false;
    out property <bool> delete_preset: false;
    out property <int> deleted_preset: 0;
    out property <bool> rename_preset: false;

    in-out property <[string]> recording_names: [];
    in-out property <[[int]]> recording_values: [];
    out property <int> current_recording: 0;
    out property <bool> delete_recording: false;
    in-out property <string> deleted_recording_value: "";
    out property <int> deleted_recording: 0;
    in-out property <bool> new_recording: false;
    out property <bool> renamed_recording: false;

    in-out property <[int]> dial_values: [0, 0, 0, 0, 0, 0];
    private property <[[int]]> backup: [[0, 0, 0, 0, 0, 0]];

    in-out property <bool> playing: false;
    private property <bool> button_playing: false;
    in-out property <bool> recording: false;
    in-out property <bool> snapping: false;
    in-out property <bool> snap_playing: false;

    private property <length> snap_by: 10px;
    private property <length> next_snap: snap_by;
    private property <length> last_snap: snap_by - snap_by;
    private property <length> dial_pressed: 0px;

    private property <bool> deleting_preset: false;
    private property <bool> renaming_preset: false;
    private property <bool> deleting_recording: false;
    private property <bool> renaming_recording: false;

    in-out property <string> error_notification: "";
    in-out property <bool> error-recieved: false;

    private property <bool> control_buttons: true;

    private property <bool> playing_skip: false;
    private property <bool> snap_skip: false;
    in-out property <bool> can_skip: false;
    in-out property <bool> skipping: false;

    in-out property <bool> backend_synced: false;
    in-out property <bool> should_update_dials: false;

    private property <bool> should_delete: false;
    in-out property <bool> can_delete: true;

    private property <bool> short: false;
    private property <bool> short_snap: false;
    in-out property <bool> can_play: true;

    in-out property <bool> locked: false;

    // -------- Callbacks --------
    callback update();
    callback save();
    callback delete_recordings();
    callback record();
    callback play_pause();
    callback sync_playing_with_ui();
    callback sync_playing_with_backend();
    callback snapshot_dial_update();

    // -------- Timers --------
    // Loads settings to UI on startup
    Timer {
        interval: 0ms;
        running: true;

        triggered => {
            self.running = false;
            update();
            started = false;
            dial_values[0] = recording_values[current_recording][0];
            dial_values[1] = recording_values[current_recording][1];
            dial_values[2] = recording_values[current_recording][2];
            dial_values[3] = recording_values[current_recording][3];
            dial_values[4] = recording_values[current_recording][4];
            dial_values[5] = recording_values[current_recording][5];
        }
    }

    // Delays preset save until animation is finished
    Timer {
        interval: 0.5s;
        running: rename_preset;

        triggered => {
            save();
            rename_preset = false;
        }
    }

    // Delays recording save until animation is finished
    Timer {
        interval: 0.5s;
        running: renamed_recording;

        triggered => {
            save();
            renamed_recording = false;
        }
    }

    // Remove error text after period
    Timer {
        interval: 5s;
        running: error-recieved;

        triggered => {
            error_notification = "";
            error-recieved = false;
        }
    }

    // Re-enable the recording button after a short period
    Timer {
        interval: 1s;
        running: short;

        triggered => {
            short = false;
        }
    }

    // Re-enable the input listener button after a short period
    Timer {
        interval: 1s;
        running: short_snap;

        triggered => {
            short_snap = false;
        }
    }

    // Re-enable the play buttons after a short period
    Timer {
        interval: 0.5s;
        running: !can_play;

        triggered => {
            can_play = true;
        }
    }

    // Periodically check for file changes
    Timer {
        interval: 5s;
        running: !renaming_recording && !renaming_preset && !recording && !button_playing && !snapping && !deleting_recording && !deleting_preset;

        triggered => {
            started = true;
            save();
            started = false;
        }
    }

    // 10ms interval for updating frames
    Timer {
        interval: 10ms;
        running: snap_playing || snapping || playing;

        triggered => {
            if snap_playing && !snapping {
                snapshot_dial_update();
            }
            sync_playing_with_backend();
            if backend_synced {
                control_buttons = true;
                backend_synced = false;
                if playing {
                    playing = false;
                }
                if snap_playing || snapping {
                    snapping = false;
                    snap_playing = false;
                    dial_values[0] = backup[current_recording][0];
                    dial_values[1] = backup[current_recording][1];
                    dial_values[2] = backup[current_recording][2];
                    dial_values[3] = backup[current_recording][3];
                    dial_values[4] = backup[current_recording][4];
                    dial_values[5] = backup[current_recording][5];
                    dials_edited = true;
                    save();
                    dials_edited = false;
                }
                button_playing = false;
            }
        }
    }

    // Pause to give time for audio to pause before playing the next one
    Timer {
        running: playing_skip || snap_skip;
        interval: 50ms;

        triggered => {
            if can_skip {
                if snap_skip {
                    snap_playing = true;
                    button_playing = true;
                    play_pause();
                }
                if playing_skip {
                    playing = true;
                    button_playing = true;
                    play_pause();
                }
                playing_skip = false;
                snap_skip = false;
                skipping = false;
                can_skip = false;
            }
        }
    }

    // Delays save until deleting animation is finished
    Timer {
        interval: 0.4s;
        running: should_delete;

        triggered => {
            should_delete = false;
            if delete_recording {
                delete_recordings();
                current_recording = 0;
            } else if delete_preset {
                save();
            }
            delete_recording = false;
            delete_preset = false;
        }
    }

    // -------- App layout --------
    HorizontalLayout {
        spacing: 32px;
        padding: 12px;

        // Audio dials
        VerticalLayout {
            spacing: 12px;
            
            for group[index] in dials:
            HorizontalLayout {
                spacing: 12px;

                for dial[index2] in group:
                Rectangle {
                    border-width: 1px;
                    border-color: #ffffff;
                    border-radius: 12px;
                    background: #242424;
                    drop-shadow-color: #151515;
                    drop-shadow-blur: 8px;
                    drop-shadow-offset-x: 6px;
                    drop-shadow-offset-y: 6px;
                    
                    VerticalLayout {
                        padding: 12px;
                        spacing: 12px;
                        alignment: center;
    
                        Text {
                            text: dial;
                            font-weight: 700;
                            vertical-alignment: center;
                            horizontal-alignment: center;
                        }

                        HorizontalLayout {
                            alignment: center;

                            TouchArea {
                                mouse-cursor: (!recording && !snap_playing) || snapping ? ew-resize : default;

                                rotator := SwipeGestureHandler {
                                    enabled: (!recording && !snap_playing) || snapping;

                                    Rectangle {
                                        border-width: 2px;
                                        border-color: #ffffff;
                                        border-radius: 100px;
                                        background: #242424;
                                        drop-shadow-color: #151515;
                                        drop-shadow-blur: 8px;
                                        drop-shadow-offset-x: 6px;
                                        drop-shadow-offset-y: 6px;
                                        height: 60px;
                                        width: 60px;
            
                                        HorizontalLayout {
                                            padding-top: 12px;
                                            alignment: center;
            
                                            Image {
                                                source: @image-url("icons/dial.svg");
                                                height: 40px;
                                                width: 60px;
                                                rotation-angle: dial_values[index2 + (index * 3)] * 20deg;
                                                colorize: rotator.enabled ? #ffffff : #5d5d5d;

                                                animate colorize {
                                                    duration: 0.1s;
                                                }
                                            }
                                        }
                                    }

                                    moved => {
                                        if dial_pressed != self.pressed-position.x {
                                            next_snap = snap_by;
                                            last_snap = snap_by - snap_by;
                                            dial_pressed = self.pressed-position.x;
                                        }
                                        if self.current-position.x - self.pressed-position.x > next_snap {
                                            if dial_values[index2 + (index * 3)] < 7 {
                                                dial_values[index2 + (index * 3)] += 1;
                                                last_snap = next_snap;
                                                next_snap += snap_by;
                                            }
                                        } else if self.current-position.x - self.pressed-position.x < last_snap {
                                            if dial_values[index2 + (index * 3)] > -7 {
                                                dial_values[index2 + (index * 3)] -= 1;
                                                next_snap = last_snap;
                                                last_snap -= snap_by;
                                            }
                                        }
                                        dials_edited = true;
                                        save();
                                        dials_edited = false;
                                    }
                                }
                            }
                        }
    
                        Text {
                            text: dial_values[index2 + (index * 3)];
                            vertical-alignment: center;
                            horizontal-alignment: center;
                        }
                    }
                }
            }
        }

        // Presets, recordings, and playback controls
        VerticalLayout {
            spacing: 12px;

            HorizontalLayout {
                spacing: 32px;

                // Presets
                VerticalLayout {
                    spacing: 12px;

                    HorizontalLayout {
                        alignment: start;
                        spacing: 8px;

                        Text {
                            text: "Presets";
                            font-size: 16px;
                            font-weight: 700;
                            vertical-alignment: center;
                        }

                        add := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !locked;

                            Image {
                                source: @image-url("icons/plus.svg");
                                width: 20px;
                                height: 20px;
                                colorize: !add.enabled ? #5d5d5d : #ffffff;

                                animate colorize {
                                    duration: 0.3s;
                                }
                            }

                            clicked => {
                                new_preset = true;
                                save();
                                new_preset = false;
                            }
                        }

                        if renaming_preset:
                        TouchArea {
                            mouse-cursor: pointer;

                            Image {
                                source: @image-url("icons/check.svg");
                                width: 16px;
                                height: 16px;
                            }

                            clicked => {
                                renaming_preset = !renaming_preset;
                                rename_preset = true;
                            }
                        }

                        if !renaming_preset:
                        preset_rename := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !locked;

                            Image {
                                source: @image-url("icons/rename.svg");
                                width: 16px;
                                height: 16px;
                                colorize: !preset_rename.enabled ? #5d5d5d : #ffffff;

                                animate colorize {
                                    duration: 0.3s;
                                }
                            }

                            clicked => {
                                deleting_preset = false;
                                renaming_preset = !renaming_preset;
                            }
                        }

                        if deleting_preset:
                        TouchArea {
                            mouse-cursor: pointer;

                            Image {
                                source: @image-url("icons/check.svg");
                                width: 16px;
                                height: 16px;
                            }

                            clicked => {
                                deleting_preset = !deleting_preset;
                            }
                        }

                        if !deleting_preset:
                        preset_delete := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !locked;

                            Image {
                                source: @image-url("icons/trash.svg");
                                width: 16px;
                                height: 16px;
                                colorize: !preset_delete.enabled ? #5d5d5d : #ffffff;

                                animate colorize {
                                    duration: 0.3s;
                                }
                            }

                            clicked => {
                                renaming_preset = false;
                                deleting_preset = !deleting_preset;
                            }
                        }
                    }

                    ScrollView {
                        vertical-scrollbar-policy: always-off;
                        
                        VerticalLayout {
                            alignment: start;
                            spacing: deleting_preset && delete_preset ? 0px : renaming_preset ? 8px : 16px;

                            animate spacing {
                                duration: 0.3s;
                                easing: ease-in-out-back;
                            }

                            TouchArea {
                                mouse-cursor: pointer;
                                enabled: (!renaming_preset && !deleting_preset && !snap_playing && can_delete) || snapping;

                                Rectangle {
                                    border-radius: 8px;
                                    background: #ffffff00;

                                    VerticalLayout {
                                        padding: 0px;
                                        spacing: 4px;
                                        alignment: start;
            
                                        Text {
                                            text: deleting_preset ? "Can't delete preset" : renaming_preset ? "Can't rename preset" : "Reset";
                                            font-weight: 700;
                                            overflow: elide;
                                        }
                
                                        Text {
                                            text: "0  0  0  0  0  0";
                                            overflow: elide;
                                            vertical-alignment: center;
                                        }
                                    }
                                }

                                clicked => {
                                    dial_values[0] = 0;
                                    dial_values[1] = 0;
                                    dial_values[2] = 0;
                                    dial_values[3] = 0;
                                    dial_values[4] = 0;
                                    dial_values[5] = 0;
                                    dials_edited = true;
                                    save();
                                    dials_edited = false;
                                }
                            }

                            for preset[index] in preset_values:
                            TouchArea {
                                mouse-cursor: pointer;
                                enabled: (!renaming_preset && !snap_playing) || snapping;

                                Rectangle {
                                    border-radius: 8px;
                                    background: deleted_preset == index && delete_preset ? #ffffff00 : deleting_preset ? @linear-gradient(90deg, #dc4242 30%, #ed2e2e00 100%) : renaming_preset ? @linear-gradient(90deg, #3f51b5 30%, #3f51b500 100%) : #ffffff00;

                                    animate background {
                                        duration: 0.2s;
                                    }

                                    VerticalLayout {
                                        padding: deleted_preset == index && delete_preset ? 0px : deleting_preset || renaming_preset ? 8px: 0px;
                                        spacing: renaming_preset || (deleted_preset == index && delete_preset) ? 0px : 4px;
                                        alignment: start;

                                        animate padding, spacing {
                                            duration: 0.3s;
                                            easing: ease-in-out-back;
                                        }

                                        if renaming_preset:
                                        TextInput {
                                            text: preset_names[index];
                                            font-weight: 700;

                                            edited => {
                                                preset_names[index] = self.text;
                                            }
                                        }
            
                                        if !renaming_preset:
                                        Text {
                                            text: preset_names[index];
                                            font-weight: 700;
                                            overflow: elide;
                                            font-size: deleted_preset == index && delete_preset ? 1px : 12px;
                                            opacity: deleted_preset == index && delete_preset ? 0% : 100%;

                                            animate font-size, opacity {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                
                                        Text {
                                            text: "\{preset[0]}  \{preset[1]}  \{preset[2]}  \{preset[3]}  \{preset[4]}  \{preset[5]}";
                                            overflow: elide;
                                            vertical-alignment: center;
                                            font-size: renaming_preset || (deleted_preset == index && delete_preset) ? 1px : 12px;
                                            opacity: renaming_preset || (deleted_preset == index && delete_preset) ? 0% : 100%;

                                            animate font-size, opacity {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                                    }
                                }

                                clicked => {
                                    if deleting_preset {
                                        if can_delete {
                                            can_delete = false;
                                            should_delete = true;
                                            deleted_preset = index;
                                            delete_preset = true;
                                        }
                                    } else {
                                        dial_values[0] = preset[0];
                                        dial_values[1] = preset[1];
                                        dial_values[2] = preset[2];
                                        dial_values[3] = preset[3];
                                        dial_values[4] = preset[4];
                                        dial_values[5] = preset[5];
                                        dials_edited = true;
                                        save();
                                        dials_edited = false;
                                    }
                                }
                            }
                        }
                    }
                }

                // Recordings
                VerticalLayout {
                    spacing: 12px;

                    HorizontalLayout {
                        alignment: start;
                        spacing: 8px;
                        
                        Text {
                            text: "Recordings";
                            font-size: 16px;
                            font-weight: 700;
                        }

                        if renaming_recording:
                        TouchArea {
                            mouse-cursor: pointer;

                            Image {
                                source: @image-url("icons/check.svg");
                                width: 16px;
                                height: 16px;
                            }

                            clicked => {
                                renaming_recording = !renaming_recording;
                                renamed_recording = true;
                                control_buttons = true;
                            }
                        }

                        if !renaming_recording:
                        rename := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !recording && !snapping && !locked;

                            Image {
                                source: @image-url("icons/rename.svg");
                                width: 16px;
                                height: 16px;
                                colorize: !rename.enabled ? #5d5d5d : #ffffff;

                                animate colorize {
                                    duration: 0.3s;
                                }
                            }

                            clicked => {
                                deleting_recording = false;
                                renaming_recording = !renaming_recording;
                                playing = false;
                                snap_playing = false;
                                button_playing = false;
                                control_buttons = false;
                                sync_playing_with_ui();
                            }
                        }

                        if deleting_recording:
                        TouchArea {
                            mouse-cursor: pointer;

                            Image {
                                source: @image-url("icons/check.svg");
                                width: 16px;
                                height: 16px;
                            }

                            clicked => {
                                deleting_recording = !deleting_recording;
                                control_buttons = true;
                            }
                        }

                        if !deleting_recording:
                        trash := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !recording && !snapping && !locked;

                            Image {
                                source: @image-url("icons/trash.svg");
                                width: 16px;
                                height: 16px;
                                colorize: !trash.enabled ? #5d5d5d : #ffffff;

                                animate colorize {
                                    duration: 0.3s;
                                }
                            }

                            clicked => {
                                deleting_recording = !deleting_recording;
                                renaming_recording = false;
                                playing = false;
                                snap_playing = false;
                                button_playing = false;
                                control_buttons = false;
                                sync_playing_with_ui();
                            }
                        }

                        if locked:
                        lock := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !recording && !snapping;

                            Image {
                                source: @image-url("icons/lock.svg");
                                width: 16px;
                                height: 16px;
                                colorize: !lock.enabled ? #5d5d5d : #ffffff;

                                animate colorize {
                                    duration: 0.3s;
                                }
                            }

                            clicked => {
                                locked = !locked;
                            }
                        }

                        if !locked:
                        lock2 := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !recording && !snapping;

                            Image {
                                source: @image-url("icons/unlock.svg");
                                width: 16px;
                                height: 16px;
                                colorize: !lock2.enabled ? #5d5d5d : #ffffff;
                            }

                            clicked => {
                                locked = !locked;
                                backup = recording_values;
                            }
                        }
                    }


                    ScrollView {
                        vertical-scrollbar-policy: always-off;

                        VerticalLayout {
                            alignment: start;
                            spacing: deleting_recording && delete_recording ? 0px : renaming_recording ? 8px : 16px;

                            animate spacing {
                                duration: 0.3s;
                                easing: ease-in-out-back;
                            }

                            for recording[index] in recording_values:
                            TouchArea {
                                mouse-cursor: pointer;
                                enabled: !renaming_recording && !playing && !snap_playing && !button_playing && can_delete;

                                Rectangle {
                                    border-radius: 8px;
                                    border-width: 1px;
                                    border-color: current_recording == index && !deleting_recording && !renaming_recording? @linear-gradient(90deg, #ffffff 10%, #ffffff00 90%) : #ffffff00;
                                    background: deleted_recording == index && delete_recording ? #ffffff00 : deleting_recording ? @linear-gradient(90deg, #dc4242 30%, #ed2e2e00 100%) : renaming_recording ? @linear-gradient(90deg, #3f51b5 30%, #3f51b500 100%) : #ffffff00;
                                    
                                    animate background, border-color {
                                        duration: 0.2s;
                                    }
                
                                    VerticalLayout {
                                        padding: deleted_recording == index && delete_recording ? 0px : deleting_recording || current_recording == index || renaming_recording ? 8px: 0px;
                                        spacing: renaming_recording || (deleted_recording == index && delete_recording) ? 0px : 4px;
                                        alignment: start;

                                        animate padding, spacing {
                                            duration: 0.3s;
                                            easing: ease-in-out-back;
                                        }

                                        if renaming_recording:
                                        TextInput {
                                            text: recording_names[index];
                                            font-weight: 700;

                                            edited => {
                                                recording_names[index] = self.text;
                                            }
                                        }
            
                                        if !renaming_recording:
                                        Text {
                                            text: recording_names[index];
                                            font-weight: 700;
                                            overflow: elide;
                                            font-size: renaming_recording || (deleted_recording == index && delete_recording) ? 1px : 12px;
                                            opacity: renaming_recording || (deleted_recording == index && delete_recording) ? 0% : 100%;

                                            animate font-size, opacity {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                
                                        Text {
                                            text: snapping || locked ? "\{backup[index][0]}  \{backup[index][1]}  \{backup[index][2]}  \{backup[index][3]}  \{backup[index][4]}  \{backup[index][5]}" : "\{recording[0]}  \{recording[1]}  \{recording[2]}  \{recording[3]}  \{recording[4]}  \{recording[5]}";
                                            overflow: elide;
                                            vertical-alignment: center;
                                            font-size: renaming_recording || (deleted_recording == index && delete_recording) ? 1px : 12px;
                                            opacity: renaming_recording || (deleted_recording == index && delete_recording) ? 0% : 100%;
                                            color: locked ? #5d5d5d : #ffffff;

                                            animate font-size, opacity, color {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                                    }
                                }

                                clicked => {
                                    if deleting_recording {
                                        can_delete = false;
                                        deleted_recording = index;
                                        deleted_recording_value = recording_names[index];
                                        delete_recording = true;
                                        should_delete = true;
                                    } else {
                                        current_recording = index;
                                        dial_values[0] = recording_values[current_recording][0];
                                        dial_values[1] = recording_values[current_recording][1];
                                        dial_values[2] = recording_values[current_recording][2];
                                        dial_values[3] = recording_values[current_recording][3];
                                        dial_values[4] = recording_values[current_recording][4];
                                        dial_values[5] = recording_values[current_recording][5];
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Playback controls
            VerticalLayout {
                spacing: 12px;
                height: 0%;

                // Error notifications
                HorizontalLayout {
                    alignment: center;

                    Text {
                        text: error_notification;
                        color: #dc4242;
                        font-weight: 700;
                    }
                }

                // Control group
                HorizontalLayout {
                    spacing: 12px;

                    back := TouchArea {
                        mouse-cursor: pointer;
                        enabled: (playing || snap_playing) && (!recording || !snapping) && current_recording > 0;

                        Rectangle {
                            border-width: 1px;
                            border-radius: 8px;
                            border-color: #ffffff;
                            background: #242424;
                            drop-shadow-color: #101010;
                            drop-shadow-blur: 8px;
                            drop-shadow-offset-x: 4px;
                            drop-shadow-offset-y: 4px;
                            min-width: 100px;
    
                            HorizontalLayout {
                                padding: 12px;
                                alignment: center;
    
                                Image {
                                    source: @image-url("icons/rewind.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: !back.enabled ? #5d5d5d : #ffffff;

                                    animate colorize {
                                        duration: 0.1s;
                                    }
                                }
                            }
                        }

                        clicked => {
                            if current_recording > 0 {
                                skipping = true;
                                if snap_playing {
                                    snap_playing = false;
                                    button_playing = false;
                                    play_pause();
                                    current_recording -= 1;
                                    snap_skip = true;
                                }
                                if playing {
                                    playing = false;
                                    button_playing = false;
                                    play_pause();
                                    current_recording -= 1;
                                    playing_skip = true;
                                }
                            }
                            dial_values[0] = recording_values[current_recording][0];
                            dial_values[1] = recording_values[current_recording][1];
                            dial_values[2] = recording_values[current_recording][2];
                            dial_values[3] = recording_values[current_recording][3];
                            dial_values[4] = recording_values[current_recording][4];
                            dial_values[5] = recording_values[current_recording][5];
                        }
                    }

                    snap_play := TouchArea {
                        mouse-cursor: pointer;
                        enabled: control_buttons && !playing && can_play;

                        Rectangle {
                            border-width: 1px;
                            border-radius: 8px;
                            border-color: #ffffff;
                            background: #242424;
                            drop-shadow-color: #101010;
                            drop-shadow-blur: 8px;
                            drop-shadow-offset-x: 4px;
                            drop-shadow-offset-y: 4px;
                            min-width: 100px;
    
                            HorizontalLayout {
                                padding: 12px;
                                alignment: center;
    
                                if snap_playing:
                                Image {
                                    source: @image-url("icons/pause.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: snap_play.enabled ? #479cec : #244c72;

                                    animate colorize {
                                        duration: 0.1s;
                                    }
                                }
        
                                if !snap_playing:
                                Image {
                                    source: @image-url("icons/play.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: snap_play.enabled ? #479cec : #244c72;

                                    animate colorize {
                                        duration: 0.1s;
                                    }
                                }
                            }
                        }

                        clicked => {
                            snap_playing = !snap_playing;
                            if snap_playing {
                                backup = recording_values;
                                button_playing = true;
                            } else {
                                can_play = false;
                                button_playing = false;
                                dial_values[0] = recording_values[current_recording][0];
                                dial_values[1] = recording_values[current_recording][1];
                                dial_values[2] = recording_values[current_recording][2];
                                dial_values[3] = recording_values[current_recording][3];
                                dial_values[4] = recording_values[current_recording][4];
                                dial_values[5] = recording_values[current_recording][5];
                            }
                            play_pause();
                        }
                    }

                    play := TouchArea {
                        mouse-cursor: pointer;
                        enabled: control_buttons && !snap_playing && can_play;

                        Rectangle {
                            border-width: 1px;
                            border-radius: 8px;
                            border-color: #ffffff;
                            background: #242424;
                            drop-shadow-color: #101010;
                            drop-shadow-blur: 8px;
                            drop-shadow-offset-x: 4px;
                            drop-shadow-offset-y: 4px;
                            min-width: 100px;
    
                            HorizontalLayout {
                                padding: 12px;
                                alignment: center;
    
                                if playing:
                                Image {
                                    source: @image-url("icons/pause.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: play.enabled ? #ec4747 : #912e2e;

                                    animate colorize {
                                        duration: 0.1s;
                                    }
                                }
        
                                if !playing:
                                Image {
                                    source: @image-url("icons/play.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: play.enabled ? #ec4747 : #912e2e;

                                    animate colorize {
                                        duration: 0.1s;
                                    }
                                }
                            }
                        }

                        clicked => {
                            playing = !playing;
                            if playing {
                                button_playing = true;
                            } else {
                                can_play = false;
                                button_playing = false;
                            }
                            play_pause();
                        }
                    }

                    next := TouchArea {
                        mouse-cursor: pointer;
                        enabled: (playing || snap_playing) && (!recording || !snapping) && current_recording < recording_names.length - 1;

                        Rectangle {
                            border-width: 1px;
                            border-radius: 8px;
                            border-color: #ffffff;
                            background: #242424;
                            drop-shadow-color: #101010;
                            drop-shadow-blur: 8px;
                            drop-shadow-offset-x: 4px;
                            drop-shadow-offset-y: 4px;
                            min-width: 100px;
    
                            HorizontalLayout {
                                padding: 12px;
                                alignment: center;
    
                                Image {
                                    source: @image-url("icons/next.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: !next.enabled ? #5d5d5d : #ffffff;

                                    animate colorize {
                                        duration: 0.1s;
                                    }
                                }
                            }
                        }

                        clicked => {
                            if current_recording < recording_names.length - 1 {
                                skipping = true;
                                if snap_playing {
                                    snap_playing = false;
                                    button_playing = false;
                                    play_pause();
                                    current_recording += 1;
                                    snap_skip = true;
                                }
                                if playing {
                                    playing = false;
                                    button_playing = false;
                                    play_pause();
                                    current_recording += 1;
                                    playing_skip = true;
                                }
                            }
                            dial_values[0] = recording_values[current_recording][0];
                            dial_values[1] = recording_values[current_recording][1];
                            dial_values[2] = recording_values[current_recording][2];
                            dial_values[3] = recording_values[current_recording][3];
                            dial_values[4] = recording_values[current_recording][4];
                            dial_values[5] = recording_values[current_recording][5];
                        }
                    }
                }

                HorizontalLayout {
                    spacing: 12px;

                    snapper := TouchArea {
                        mouse-cursor: pointer;
                        enabled: !recording && !button_playing && !short_snap;
    
                        Rectangle {
                            border-width: 1px;
                            border-radius: 8px;
                            border-color: #ffffff;
                            background: #242424;
                            drop-shadow-color: #101010;
                            drop-shadow-blur: 8px;
                            drop-shadow-offset-x: 6px;
                            drop-shadow-offset-y: 6px;
        
                            HorizontalLayout {
                                padding: 12px;
                                alignment: center;
    
                                if snapping:
                                Image {
                                    source: @image-url("icons/stop-circle.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: snapper.enabled ? #479cec : #244c72;
                                }
    
                                if !snapping:
                                Image {
                                    source: @image-url("icons/circle.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: snapper.enabled ? #479cec : #244c72;
                                }
                            }
                        }
    
                        clicked => {
                            snapping = !snapping;
                            if snapping {
                                backup = recording_values;
                                control_buttons = false;
                                snap_playing = true;
                                play_pause();
                            } else {
                                dial_values = backup[current_recording];
                                dials_edited = true;
                                save();
                                dials_edited = false;
                                control_buttons = true;
                                snap_playing = false;
                                playing = false;
                                play_pause();
                            }
                            short_snap = true;
                            renaming_recording = false;
                            deleting_recording = false;
                        }
                    }

                    recorder := TouchArea {
                        mouse-cursor: pointer;
                        enabled: !snapping && !button_playing && !snap_playing && !playing && !short;
    
                        Rectangle {
                            border-width: 1px;
                            border-radius: 8px;
                            border-color: #ffffff;
                            background: #242424;
                            drop-shadow-color: #101010;
                            drop-shadow-blur: 8px;
                            drop-shadow-offset-x: 6px;
                            drop-shadow-offset-y: 6px;
        
                            HorizontalLayout {
                                padding: 12px;
                                alignment: center;
    
                                if recording:
                                Image {
                                    source: @image-url("icons/stop-circle.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: recorder.enabled ? #ec4747 : #912e2e;
                                }
    
                                if !recording:
                                Image {
                                    source: @image-url("icons/circle.svg");
                                    width: 20px;
                                    height: 20px;
                                    colorize: recorder.enabled ? #ec4747 : #912e2e;
                                }
                            }
                        }
    
                        clicked => {
                            recording = !recording;
                            deleting_recording = false;
                            renaming_recording = false;
                            if recording {
                                playing = false;
                                button_playing = false;
                                control_buttons = false;
                            } else {
                                control_buttons = true;
                                playing = false;
                                button_playing = false;
                                new_recording = true;
                            }
                            short = true;
                            record();
                            new_recording = false;
                            if playing || snap_playing {
                                sync_playing_with_ui();
                            }
                        }
                    }
                }
            }
        }
    }
}
