// -------- Imports --------
import { ScrollView } from "std-widgets.slint";

// -------- Enums --------
export enum PlaybackType {
    AutoNext,
    Loop,
    None,
}

// -------- UI components --------
component ShadowedRectangle inherits Rectangle { // Rectangle with a drop shadow and a border
    border-width: 1px;
    border-radius: 12px;
    border-color: #ffffff;
    background: #242424;
    drop-shadow-color: #151515;
    drop-shadow-blur: 8px;
    drop-shadow-offset-x: 6px;
    drop-shadow-offset-y: 6px;
}

// ---- Text ----
component HeadingLarge inherits Text { // Large and bold text
    font-size: 16px;
    font-weight: 700;
}

component HeadingSmall inherits Text { // Small and bold text
    font-size: 12px;
    font-weight: 700;
    overflow: elide;
}

component NormalText inherits Text { // Small and non bold text
    font-size: 12px;
    font-weight: 300;
    overflow: elide;
}

// ---- Images ----
component StatusImageSmall inherits Image { // Small image size
    width: 16px;
    height: 16px;
}

component StatusImageLarge inherits Image { // Large image size
    width: 20px;
    height: 20px;
}

// ---- Buttons ----
component BasicButton inherits TouchArea { // Invisible button
    mouse-cursor: self.enabled ? pointer : default;
}

component ShadowedButton inherits BasicButton { // Button with a border and a drop shadow
    ShadowedRectangle {
    }
}

export component AppWindow inherits Window {
    // Window setup
    title: "audio"; // Name of the app
    background: default_background_colour; // Background colour of the app

    // -------- Variables --------
    in-out property <bool> started: true; // Keeps track of when the app needs to load data from disk
    private property <bool> should_delete: false; // Whether a recording or a preset needs deleting
    in-out property <bool> can_delete: true; // Prevents spamming by disabling deleting while the animation plays
    
    // ---- Dials ----
    private property <[[string]]> dial_names: [["Sub Bass", "Bass", "Low Mids"], ["High Mids", "Treble", "Pan"]];
    // Values and edits
    in-out property <[int]> current_dial_values: [0, 0, 0, 0, 0, 0];
    in-out property <[[int]]> dial_values_when_locked: [[0, 0, 0, 0, 0, 0]]; // The values that the dials held when the lock button was pressed
    out property <bool> dials_edited: false;
    // input_recording
    private property <length> snap_by: 10px; // How far the user needs to move the mouse to cause a dial to rotate
    private property <length> next_dial_snap_position: snap_by; // The next valid position that will recognise a dial rotation
    private property <length> previous_dial_snap_position: snap_by - snap_by; // The previous valid postion that will recognise a dial rotation
    private property <length> dial_pressed_position: 0px; // The initially clicked position of a dial
    
    // ---- Presets ----
    in-out property <[string]> preset_names: [];
    in-out property <[[int]]> preset_values: [];
    // Creating
    out property <bool> new_preset_created: false;
    // Renaming
    private property <bool> preset_renaming_mode: false;
    out property <bool> preset_renamed: false;
    // Deleting
    private property <bool> preset_deleting_mode: false;
    out property <bool> preset_deleted: false;
    out property <int> deleted_preset_index: 0; // Which preset has been deleted
    
    // ---- Recordings ----
    in-out property <[string]> recording_names: [];
    in-out property <[[int]]> recording_values: [];
    out property <int> current_recording: 0; // The currently selected recording
    // Renaming
    private property <bool> recording_renaming_mode: false;
    out property <bool> recording_renamed: false;
    // Deleting
    private property <bool> recording_deleting_mode: false;
    out property <bool> recording_deleted: false;
    out property <int> deleted_recording_index: 0; // Which recording has been deleted
    in-out property <string> deleted_recording_name: ""; // The name of the deleted recording
    
    // ---- Playback ----
    out property <bool> audio_or_input_playback: audio_playback || input_playback; // True if either play button is playing something
    private property <bool> playback_allowed: true;
    in-out property <bool> locked: false; // Prevents dial rotations from being saved to disk and from updating the UI
    in-out property <bool> shuffle: true;
    in-out property <[int]> shuffle_order: [];
    private property <int> current_shuffle_index: 0;
    in-out property <PlaybackType> playback: PlaybackType.AutoNext;
    
    // ---- Audio playback ----
    in-out property <bool> audio_playback: false; // True when playing back audio normally
    in-out property <bool> backend_not_playing: false; // Used to sync the UI with the state of the backend
    
    // ---- Audio recording ----
    in-out property <bool> recording: false; // Whether a recording is in progress
    in-out property <bool> new_recording: false;
    private property <bool> recording_timeout: false; // Disables the recording button for a short period to prevent spamming
    in-out property <int> new_recording_index: 0; // Where in the list to create the new recording, used purely for animation purposes

    // ---- Input playback ----
    in-out property <bool> input_playback: false; // True when playing back audio and recorded inputs
    
    // ---- Input recording ----
    in-out property <bool> input_recording: false; // Whether the app is listening for changes in the dials rotation
    private property <bool> input_recording_timeout: false; // Disables the input recording button for a short period to prevent spamming

    // ---- Skipping ----
    private property <bool> skipped_while_audio_playing: false; // Checks whether it should continue playing from the normal player when skipped
    private property <bool> skipped_while_input_playing: false; // Checks whether it should continue playing from the input player when skipped
    in-out property <bool> skipping_allowed: false; // Makes sure the backend has stopped playing before skipping to prevent spamming
    private property <bool> skipping: false; // True when skipping caused from any source

    // ---- Errors ----
    in-out property <string> error_notification: ""; // Contents of the error
    in-out property <bool> error-recieved: false; // Whether there is an error

    // ---- Colour palette ----
    private property <color> transparent_colour: #24242400;
    private property <color> default_background_colour: #242424;
    private property <color> default_drop_shadow_colour: #151515;
    private property <brush> recording_border_colour: @linear-gradient(90deg, #ffffff 10%, #ffffff00 90%);
    private property <color> white: #ffffff;
    private property <color> generic_disabled: #5d5d5d;
    private property <color> play_and_record_colour: #ec4747;
    private property <color> play_and_record_disabled: #912e2e;
    private property <color> input_playback_colour: #479cec;
    private property <color> input_playback_disabled: #244c72;
    private property <brush> rename_colour: @linear-gradient(90deg, #3f51b5 30%, transparent_colour 100%);
    private property <brush> delete_colour: @linear-gradient(90deg, #dc4242 30%, transparent_colour 100%);
    private property <color> error_colour: #dc4242;
    private property <color> highlight_colour: #3e3e3e;

    // -------- Callbacks --------
    callback update(); // Updates the UI with values from the backend
    callback update_locked_values();
    callback sync_with_locked_values();
    callback save(); // Saves new values to disk
    callback delete_recordings(); // Deletes recordings from the backend
    callback record(); // Records and saves a new recording
    callback play_pause(); // Plays and pauses recordings
    callback sync_playing_with_ui(); // Syncs the playing value in the backend with the one in the UI
    callback sync_playing_with_backend(); // Syncs the playing value in the UI with the one in the backend
    callback snapshot_dial_update(); // Updates dials with the saved snapshot value
    callback check_for_errors(); // Checks for errors
    callback gen_shuffle(); // Generates shuffle order

    // -------- Functions --------
    function sync_current_dial_values_with_recording_values() {
        current_dial_values = recording_values[current_recording];
    }

    function save_dial_edits() {
        dials_edited = true;
        save();
        dials_edited = false;
    }

    function calculate_skipped_to_recording(forward: bool) {
        if forward { // Checks whehter you skipped forwards or backwards
            if shuffle {
                if current_shuffle_index == shuffle_order.length - 1 {
                    current_shuffle_index = 0;
                } else {
                    current_shuffle_index += 1;
                }
                current_recording = shuffle_order[current_shuffle_index];
            } else {
                if current_recording < recording_names.length - 1 {
                    current_recording += 1;
                } else {
                    current_recording = 0;
                }
            }
        } else {
            if shuffle {
                if current_shuffle_index > 0 {
                    current_shuffle_index -= 1;
                } else {
                    current_shuffle_index = shuffle_order.length - 1;
                }
                current_recording = shuffle_order[current_shuffle_index];
            } else {
                if current_recording > 0 {
                    current_recording -= 1;
                } else {
                    current_recording = recording_names.length - 1
                }
            }
        }
    }

    function skip(skipped_with_button: bool, skipped_forward: bool) {
        skipping = true;
        if input_playback {
            input_playback = false;
            if skipped_with_button {
                calculate_skipped_to_recording(skipped_forward)
            }
            skipped_while_input_playing = true;
        }
        if audio_playback {
            audio_playback = false;
            if skipped_with_button {
                calculate_skipped_to_recording(skipped_forward)
            }
            skipped_while_audio_playing = true;
        }
        play_pause();
    }

    function set_playing_values(audio: bool, input: bool) {
        if audio {
            audio_playback = !audio_playback;
            if audio_playback {
                update_locked_values();
            } else {
                playback_allowed = false;
            }
            play_pause();
        } else if input {
            input_playback = !input_playback;
            if input_playback {
                update_locked_values();
                locked = false;
            } else {
                playback_allowed = false;
                sync_current_dial_values_with_recording_values();
            }
            play_pause();
        } else if !audio && !input {
            audio_playback = false;
            input_playback = false;
            sync_playing_with_ui();
        }
    }

    function disable_buttons_on_record() {
        update_locked_values();
        recording_renaming_mode = false;
        recording_deleting_mode = false;
        locked = false;
    }

    // -------- Timers --------
    // Loads settings to UI on startup
    Timer {
        interval: 0ms;
        running: true;

        triggered => {
            self.running = false;
            update();
            started = false;
            sync_current_dial_values_with_recording_values();
        }
    }

    // Delays preset save until animation is finished
    Timer {
        interval: 0.5s;
        running: preset_renamed;

        triggered => {
            save();
            preset_renamed = false;
        }
    }

    // Delays recording save until animation is finished
    Timer {
        interval: 0.5s;
        running: recording_renamed;

        triggered => {
            save();
            recording_renamed = false;
        }
    }

    // Remove error text after period
    Timer {
        interval: 5s;
        running: error-recieved;

        triggered => {
            error_notification = "";
            error-recieved = false;
        }
    }

    // Re-enable the recording button after a recording_timeout period
    Timer {
        interval: 1s;
        running: recording_timeout;

        triggered => {
            recording_timeout = false;
        }
    }

    // Re-enable the input listener button after a recording_timeout period
    Timer {
        interval: 1s;
        running: input_recording_timeout;

        triggered => {
            input_recording_timeout = false;
        }
    }

    // Re-enable the play buttons after a recording_timeout period
    Timer {
        interval: 0.5s;
        running: !playback_allowed;

        triggered => {
            playback_allowed = true;
        }
    }

    // Periodically check for file changes
    Timer {
        interval: 5s;
        running: !recording_renaming_mode && !preset_renaming_mode && !recording && !audio_or_input_playback && !input_recording && !recording_deleting_mode && !preset_deleting_mode;

        triggered => {
            started = true;
            save();
            started = false;
        }
    }

    // 10ms interval for updating frames
    // Also checks to see if the audio has finished so it can update the ui
    // Also handles auto skipping and looping
    // Also makes sure there aren't any errors that have occured
    Timer {
        interval: 10ms;
        running: input_playback || input_recording || audio_playback;

        triggered => {
            if input_playback && !input_recording {
                snapshot_dial_update();
            }
            sync_playing_with_backend();
            if backend_not_playing {
                backend_not_playing = false;
                if input_playback || input_recording {
                    sync_with_locked_values();
                    save_dial_edits();
                }

                if playback == PlaybackType.AutoNext {
                    if shuffle {
                        current_recording = shuffle_order[current_shuffle_index];
                        if current_shuffle_index == shuffle_order.length - 1 {
                            current_shuffle_index = 0;
                        } else {
                            current_shuffle_index += 1;
                        }
                    } else {
                        if current_recording < recording_names.length - 1 {
                            current_recording += 1;
                        } else {
                            current_recording = 0;
                        }
                    }
                    sync_with_locked_values();

                    play_pause();
                } else if playback == PlaybackType.Loop {
                    play_pause();
                } else {
                    audio_playback = false;
                    input_recording = false;
                    input_playback = false;
                }
            }
            check_for_errors();
        }
    }

    // Pause to give time for audio to pause before playing the next one
    // Also checks with backend to make sure it has finished pausing
    Timer {
        running: skipping;
        interval: 1s;

        triggered => {
            if skipping_allowed {
                if skipped_while_input_playing {
                    input_playback = true;
                    play_pause();
                }
                if skipped_while_audio_playing {
                    audio_playback = true;
                    play_pause();
                }
                skipped_while_audio_playing = false;
                skipped_while_input_playing = false;
                skipping = false;
                skipping_allowed = false;
            }
        }
    }

    // Delays save until deleting animation is finished
    Timer {
        interval: 0.4s;
        running: should_delete;

        triggered => {
            should_delete = false;
            if recording_deleted {
                delete_recordings();
                current_recording = 0;
            } else if preset_deleted {
                save();
            }
            recording_deleted = false;
            preset_deleted = false;
        }
    }

    // IDK, there's no delay but it doesn't work otherwise
    Timer {
        interval: 0s;
        running: new_preset_created || new_recording;

        triggered => {
            if new_preset_created {
                new_preset_created = false;
            } else if new_recording {
                new_recording = false;
            }
        }
    }

    // -------- App layout --------
    HorizontalLayout {
        spacing: 32px;
        padding: 12px;

        // Audio dials
        VerticalLayout {
            spacing: 12px;
            
            for group[index] in dial_names:
            HorizontalLayout {
                spacing: 12px;

                for dial[index2] in group:
                ShadowedRectangle {
                    
                    VerticalLayout {
                        padding: 12px;
                        spacing: 12px;
                        alignment: center;
    
                        HeadingSmall {
                            text: dial;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                        }

                        HorizontalLayout {
                            alignment: center;

                            TouchArea {
                                mouse-cursor: self.enabled ? ew-resize : default;
                                enabled: rotator.enabled;

                                rotator := SwipeGestureHandler {
                                    enabled: (!recording && !input_playback) || input_recording;

                                    ShadowedRectangle {
                                        border-width: 2px;
                                        border-radius: 100px;
                                        height: 60px;
                                        width: 60px;
            
                                        HorizontalLayout {
                                            padding-top: 12px;
                                            alignment: center;
            
                                            Image {
                                                source: @image-url("icons/dial.svg");
                                                height: 40px;
                                                width: 60px;
                                                rotation-angle: current_dial_values[index2 + (index * 3)] * 20deg;
                                                colorize: rotator.enabled ? white : generic_disabled;

                                                animate colorize {
                                                    duration: 0.1s;
                                                }
                                            }
                                        }
                                    }

                                    moved => {
                                        if dial_pressed_position != self.pressed-position.x {
                                            next_dial_snap_position = snap_by;
                                            previous_dial_snap_position = snap_by - snap_by;
                                            dial_pressed_position = self.pressed-position.x;
                                        }
                                        if self.current-position.x - self.pressed-position.x > next_dial_snap_position {
                                            if current_dial_values[index2 + (index * 3)] < 7 {
                                                current_dial_values[index2 + (index * 3)] += 1;
                                                previous_dial_snap_position = next_dial_snap_position;
                                                next_dial_snap_position += snap_by;
                                                save_dial_edits();
                                            }
                                        } else if self.current-position.x - self.pressed-position.x < previous_dial_snap_position {
                                            if current_dial_values[index2 + (index * 3)] > -7 {
                                                current_dial_values[index2 + (index * 3)] -= 1;
                                                next_dial_snap_position = previous_dial_snap_position;
                                                previous_dial_snap_position -= snap_by;
                                                save_dial_edits();
                                            }
                                        }
                                    }
                                }
                            }
                        }
    
                        NormalText {
                            text: current_dial_values[index2 + (index * 3)];
                            horizontal-alignment: center;
                            vertical-alignment: center;
                        }
                    }
                }
            }
        }

        // Presets, recordings, and playback controls
        VerticalLayout {
            spacing: 12px;

            HorizontalLayout {
                spacing: 32px;

                // Presets
                VerticalLayout {
                    spacing: 12px;

                    HorizontalLayout {
                        alignment: start;
                        spacing: 8px;

                        HeadingLarge {
                            text: "Presets";
                            vertical-alignment: center;
                        }

                        add := BasicButton {
                            enabled: !locked;

                            StatusImageLarge {
                                source: @image-url("icons/plus.svg");
                                colorize: add.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.2s;
                                }
                            }

                            clicked => {
                                new_preset_created = true;
                                save();
                            }
                        }

                        if preset_renaming_mode:
                        BasicButton {

                            StatusImageSmall {
                                source: @image-url("icons/check.svg");
                            }

                            clicked => {
                                preset_renaming_mode = !preset_renaming_mode;
                                preset_renamed = true;
                            }
                        }

                        if !preset_renaming_mode:
                        preset_rename := TouchArea {
                            mouse-cursor: pointer;
                            enabled: !locked;

                            StatusImageSmall {
                                source: @image-url("icons/rename.svg");
                                colorize: preset_rename.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.2s;
                                }
                            }

                            clicked => {
                                preset_deleting_mode = false;
                                preset_renaming_mode = !preset_renaming_mode;
                            }
                        }

                        if preset_deleting_mode:
                        BasicButton {

                            StatusImageSmall {
                                source: @image-url("icons/check.svg");
                            }

                            clicked => {
                                preset_deleting_mode = !preset_deleting_mode;
                            }
                        }

                        if !preset_deleting_mode:
                        preset_delete := BasicButton {
                            enabled: !locked;

                            StatusImageSmall {
                                source: @image-url("icons/trash.svg");
                                colorize: preset_delete.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.2s;
                                }
                            }

                            clicked => {
                                preset_renaming_mode = false;
                                preset_deleting_mode = !preset_deleting_mode;
                            }
                        }
                    }

                    ScrollView {
                        vertical-scrollbar-policy: always-off;
                        
                        VerticalLayout {
                            alignment: start;
                            spacing: preset_deleting_mode && preset_deleted ? 0px : preset_renaming_mode ? 8px : 16px;

                            animate spacing {
                                duration: 0.3s;
                                easing: ease-in-out-back;
                            }

                            VerticalLayout {
                                spacing: locked ? 16px : 0px;
                                alignment: start;

                                animate spacing {
                                    duration: 0.3s;
                                }

                                VerticalLayout {
                                    alignment: start;
                                    spacing: 16px;

                                    reset := BasicButton {
                                        enabled: (!preset_renaming_mode && !preset_deleting_mode && !input_playback && can_delete) || input_recording;
        
                                        Rectangle {
                                            border-radius: 8px;
                                            background: #ffffff00;
        
                                            VerticalLayout {
                                                spacing: 4px;
                                                alignment: start;
                    
                                                HeadingSmall {
                                                    text: preset_deleting_mode ? "Can't delete preset" : preset_renaming_mode ? "Can't rename preset" : "Reset";
                                                }
                        
                                                NormalText {
                                                    text: "0  0  0  0  0  0";
                                                    vertical-alignment: center;
                                                    color: reset.enabled ? white : generic_disabled;
        
                                                    animate color {
                                                        duration: 0.2s;
                                                    }
                                                }
                                            }
                                        }
        
                                        clicked => {
                                            current_dial_values = [0, 0, 0, 0, 0, 0];
                                            save_dial_edits();
                                        }
                                    }
                                }
    
                                BasicButton {
                                    enabled: locked;
    
                                    Rectangle {
                                        border-radius: 8px;
                                        background: #ffffff00;
    
                                        VerticalLayout {
                                            spacing: !locked ? 0px : 4px;
                                            alignment: start;
    
                                            animate spacing {
                                                duration: 0.3s;
                                            }
                
                                            HeadingSmall {
                                                text: "Restore values";
                                                font-size: !locked ? 1px : 12px;
                                                opacity: !locked ? 0% : 100%;
    
                                                animate font-size, opacity {
                                                    duration: 0.3s;
                                                    easing: ease-in-out-back;
                                                }
                                            }
                    
                                            NormalText {
                                                text: "\{dial_values_when_locked[current_recording][0]}  \{dial_values_when_locked[current_recording][1]}  \{dial_values_when_locked[current_recording][2]}  \{dial_values_when_locked[current_recording][3]}  \{dial_values_when_locked[current_recording][4]}  \{dial_values_when_locked[current_recording][5]}";
                                                vertical-alignment: center;
                                                font-size: !locked ? 1px : 12px;
                                                opacity: !locked ? 0% : 100%;
    
                                                animate font-size, opacity {
                                                    duration: 0.3s;
                                                    easing: ease-in-out-back;
                                                }
                                            }
                                        }
                                    }
    
                                    clicked => {
                                        sync_with_locked_values();
                                    }
                                }
                            }

                            for preset[index] in preset_values:
                            BasicButton {
                                enabled: (!preset_renaming_mode && !input_playback) || input_recording;

                                Rectangle {
                                    border-radius: 8px;
                                    background: deleted_preset_index == index && preset_deleted ? transparent_colour : preset_deleting_mode ? delete_colour : preset_renaming_mode ? rename_colour : transparent_colour;

                                    animate background {
                                        duration: 0.2s;
                                    }

                                    VerticalLayout {
                                        padding: deleted_preset_index == index && preset_deleted ? 0px : preset_deleting_mode || preset_renaming_mode ? 8px: 0px;
                                        spacing: preset_renaming_mode || (deleted_preset_index == index && preset_deleted) ? 0px : 4px;
                                        alignment: start;

                                        animate padding, spacing {
                                            duration: 0.3s;
                                            easing: ease-in-out-back;
                                        }

                                        if preset_renaming_mode:
                                        TextInput {
                                            text: preset_names[index];
                                            font-weight: 700;

                                            edited => {
                                                preset_names[index] = self.text;
                                            }
                                        }
            
                                        if !preset_renaming_mode:
                                        HeadingSmall {
                                            text: preset_names[index];
                                            font-size: (deleted_preset_index == index && preset_deleted) || (new_preset_created && index == preset_names.length - 1) ? 1px : 12px;
                                            opacity: (deleted_preset_index == index && preset_deleted) || (new_preset_created && index == preset_names.length - 1) ? 0% : 100%;

                                            animate font-size, opacity {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                
                                        NormalText {
                                            text: "\{preset[0]}  \{preset[1]}  \{preset[2]}  \{preset[3]}  \{preset[4]}  \{preset[5]}";
                                            vertical-alignment: center;
                                            font-size: preset_renaming_mode || (deleted_preset_index == index && preset_deleted) || (new_preset_created && index == preset_names.length - 1) ? 1px : 12px;
                                            opacity: preset_renaming_mode || (deleted_preset_index == index && preset_deleted) || (new_preset_created && index == preset_names.length - 1) ? 0% : 100%;

                                            animate font-size, opacity {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                                    }
                                }

                                clicked => {
                                    if preset_deleting_mode {
                                        if can_delete {
                                            can_delete = false;
                                            should_delete = true;
                                            deleted_preset_index = index;
                                            preset_deleted = true;
                                        }
                                    } else {
                                        current_dial_values = preset;
                                        save_dial_edits();
                                    }
                                }
                            }
                        }
                    }
                }

                // Recordings
                VerticalLayout {
                    spacing: 12px;

                    HorizontalLayout {
                        alignment: start;
                        spacing: 8px;
                        
                        HeadingLarge {
                            text: "Recordings";
                            vertical-alignment: center;
                        }

                        if recording_renaming_mode:
                        BasicButton {

                            StatusImageSmall {
                                source: @image-url("icons/check.svg");
                            }

                            clicked => {
                                recording_renaming_mode = !recording_renaming_mode;
                                recording_renamed = true;
                            }
                        }

                        if !recording_renaming_mode:
                        rename := BasicButton {
                            enabled: !recording && !input_recording && !locked && !audio_or_input_playback;

                            StatusImageSmall {
                                source: @image-url("icons/rename.svg");
                                colorize: rename.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.2s;
                                }
                            }

                            clicked => {
                                recording_deleting_mode = false;
                                recording_renaming_mode = !recording_renaming_mode;
                                set_playing_values(false, false);
                            }
                        }

                        should_shuffle := BasicButton {
                            enabled: !recording && !input_recording;

                            HorizontalLayout {

                                if shuffle:
                                StatusImageSmall {
                                    source: @image-url("icons/shuffle.svg");
                                    colorize: should_shuffle.enabled ? white : generic_disabled;
    
                                    animate colorize {
                                        duration: 0.2s;
                                    }
                                }

                                if !shuffle:
                                StatusImageSmall {
                                    source: @image-url("icons/arrow-right.svg");
                                    colorize: should_shuffle.enabled ? white : generic_disabled;
    
                                    animate colorize {
                                        duration: 0.2s;
                                    }
                                }
                            }

                            clicked => {
                                if shuffle {
                                    shuffle = false;
                                } else {
                                    shuffle = true;
                                    current_shuffle_index = 0;
                                    gen_shuffle();
                                }
                            }
                        }

                        type := BasicButton {
                            enabled: !recording && !input_recording;

                            HorizontalLayout {

                                if playback == PlaybackType.AutoNext:
                                StatusImageSmall {
                                    source: @image-url("icons/skip-forward.svg");
                                    colorize: type.enabled ? white : generic_disabled;
    
                                    animate colorize {
                                        duration: 0.2s;
                                    }
                                }

                                if playback == PlaybackType.Loop:
                                StatusImageSmall {
                                    source: @image-url("icons/repeat.svg");
                                    colorize: type.enabled ? white : generic_disabled;
    
                                    animate colorize {
                                        duration: 0.2s;
                                    }
                                }

                                if playback == PlaybackType.None:
                                StatusImageSmall {
                                    source: @image-url("icons/slash.svg");
                                    colorize: type.enabled ? white : generic_disabled;
    
                                    animate colorize {
                                        duration: 0.2s;
                                    }
                                }
                            }

                            clicked => {
                                if playback == PlaybackType.AutoNext {
                                    playback = PlaybackType.Loop;
                                } else if playback == PlaybackType.Loop {
                                    playback = PlaybackType.None;
                                } else if playback == PlaybackType.None {
                                    playback = PlaybackType.AutoNext;
                                }
                            }
                        }

                        if locked:
                        lock := BasicButton {
                            enabled: !recording && !input_recording && !input_playback;

                            StatusImageSmall {
                                source: @image-url("icons/lock.svg");
                                colorize: lock.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.2s;
                                }
                            }

                            clicked => {
                                locked = !locked;
                                save_dial_edits();
                            }
                        }

                        if !locked:
                        unlock := BasicButton {
                            enabled: !recording && !input_recording && !input_playback;

                            StatusImageSmall {
                                source: @image-url("icons/unlock.svg");
                                colorize: unlock.enabled ? white : generic_disabled;
                            }

                            clicked => {
                                locked = !locked;
                                update_locked_values();
                                preset_renaming_mode = false;
                                preset_deleting_mode = false;
                                recording_renaming_mode = false;
                                recording_deleting_mode = false;
                            }
                        }

                        if recording_deleting_mode:
                        BasicButton {

                            StatusImageSmall {
                                source: @image-url("icons/check.svg");
                            }

                            clicked => {
                                recording_deleting_mode = !recording_deleting_mode;
                            }
                        }

                        if !recording_deleting_mode:
                        trash := BasicButton {
                            enabled: !recording && !input_recording && !locked && !audio_or_input_playback;

                            StatusImageSmall {
                                source: @image-url("icons/trash.svg");
                                colorize: trash.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.2s;
                                }
                            }

                            clicked => {
                                recording_deleting_mode = !recording_deleting_mode;
                                recording_renaming_mode = false;
                                set_playing_values(false, false);
                            }
                        }

                    }


                    ScrollView {
                        vertical-scrollbar-policy: always-off;

                        VerticalLayout {
                            alignment: start;
                            spacing: (recording_deleting_mode && recording_deleted) ? 0px : recording_renaming_mode ? 8px : 16px;

                            animate spacing {
                                duration: 0.3s;
                                easing: ease-in-out-back;
                            }

                            for recording[index] in recording_values:
                            BasicButton {
                                enabled: !recording_renaming_mode && can_delete && !skipping;

                                Rectangle {
                                    border-radius: 8px;
                                    border-width: 1px;
                                    border-color: current_recording == index && !recording_deleting_mode && !recording_renaming_mode && !(new_recording && index == recording_names.length - 1) ? recording_border_colour : transparent_colour;
                                    background: deleted_recording_index == index && recording_deleted ? transparent_colour : recording_deleting_mode ? delete_colour : recording_renaming_mode ? rename_colour : transparent_colour;
                                    
                                    animate background, border-color {
                                        duration: 0.2s;
                                    }
                
                                    VerticalLayout {
                                        padding: deleted_recording_index == index && recording_deleted ? 0px : recording_deleting_mode || current_recording == index || recording_renaming_mode ? 8px: 0px;
                                        spacing: recording_renaming_mode || (deleted_recording_index == index && recording_deleted) || (new_recording && index == recording_names.length - 1) ? 0px : 4px;
                                        alignment: start;

                                        animate padding, spacing {
                                            duration: 0.3s;
                                            easing: ease-in-out-back;
                                        }

                                        if recording_renaming_mode:
                                        TextInput {
                                            text: recording_names[index];
                                            font-weight: 700;

                                            edited => {
                                                recording_names[index] = self.text;
                                            }
                                        }
            
                                        if !recording_renaming_mode:
                                        HeadingSmall {
                                            text: recording_names[index];
                                            font-size: recording_renaming_mode || (deleted_recording_index == index && recording_deleted) || (new_recording && index == recording_names.length - 1) ? 1px : 12px;
                                            opacity: recording_renaming_mode || (deleted_recording_index == index && recording_deleted) || (new_recording && index == recording_names.length - 1) ? 0% : 100%;

                                            animate font-size, opacity {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                
                                        NormalText {
                                            text: input_recording || locked ? "\{dial_values_when_locked[index][0]}  \{dial_values_when_locked[index][1]}  \{dial_values_when_locked[index][2]}  \{dial_values_when_locked[index][3]}  \{dial_values_when_locked[index][4]}  \{dial_values_when_locked[index][5]}" : "\{recording[0]}  \{recording[1]}  \{recording[2]}  \{recording[3]}  \{recording[4]}  \{recording[5]}";
                                            vertical-alignment: center;
                                            font-size: recording_renaming_mode || (deleted_recording_index == index && recording_deleted) || (new_recording && index == recording_names.length - 1) ? 1px : 12px;
                                            opacity: recording_renaming_mode || (deleted_recording_index == index && recording_deleted) || (new_recording && index == recording_names.length - 1) ? 0% : 100%;
                                            color: locked || input_recording || input_playback || skipping ? generic_disabled : white;

                                            animate font-size, opacity, color {
                                                duration: 0.3s;
                                                easing: ease-in-out-back;
                                            }
                                        }
                                    }
                                }

                                clicked => {
                                    if recording_deleting_mode {
                                        can_delete = false;
                                        deleted_recording_index = index;
                                        deleted_recording_name = recording_names[index];
                                        recording_deleted = true;
                                        should_delete = true;
                                    } else {
                                        current_recording = index;
                                        if audio_or_input_playback {
                                            skip(false, false);
                                        }
                                        sync_current_dial_values_with_recording_values();
                                    }
                                }
                            }
                        }
                    }
                }
            }

            // Playback controls
            VerticalLayout {
                spacing: 12px;
                height: 0%;

                // Error notifications
                HorizontalLayout {
                    alignment: center;

                    HeadingSmall {
                        text: error_notification;
                        color: error_colour;
                    }
                }

                // Control group
                HorizontalLayout {
                    spacing: 12px;

                    back := ShadowedButton {
                        enabled: (audio_playback || input_playback) && (!recording || !input_recording);
                        min-width: 100px;
    
                        HorizontalLayout {
                            padding: 12px;
                            alignment: center;

                            StatusImageLarge {
                                source: @image-url("icons/rewind.svg");
                                colorize: back.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.1s;
                                }
                            }
                        }

                        clicked => {
                            skip(true, false);
                            sync_current_dial_values_with_recording_values();
                        }
                    }

                    play_inputs := ShadowedButton {
                        enabled: !audio_playback && playback_allowed && !recording && !input_recording;
                        min-width: 100px;
    
                        HorizontalLayout {
                            padding: 12px;
                            alignment: center;

                            if input_playback:
                            StatusImageLarge {
                                source: @image-url("icons/pause.svg");
                                colorize: play_inputs.enabled ? input_playback_colour : input_playback_disabled;

                                animate colorize {
                                    duration: 0.1s;
                                }
                            }
    
                            if !input_playback:
                            StatusImageLarge {
                                source: @image-url("icons/play.svg");
                                colorize: play_inputs.enabled ? input_playback_colour : input_playback_disabled;

                                animate colorize {
                                    duration: 0.1s;
                                }
                            }
                        }

                        clicked => {
                            set_playing_values(false, true);
                        }
                    }

                    play := ShadowedButton {
                        enabled: !input_playback && playback_allowed && !recording && !input_recording;
                        min-width: 100px;
    
                        HorizontalLayout {
                            padding: 12px;
                            alignment: center;

                            if audio_playback:
                            StatusImageLarge {
                                source: @image-url("icons/pause.svg");
                                colorize: play.enabled ? play_and_record_colour : play_and_record_disabled;

                                animate colorize {
                                    duration: 0.1s;
                                }
                            }
    
                            if !audio_playback:
                            StatusImageLarge {
                                source: @image-url("icons/play.svg");
                                colorize: play.enabled ? play_and_record_colour : play_and_record_disabled;

                                animate colorize {
                                    duration: 0.1s;
                                }
                            }
                        }

                        clicked => {
                            set_playing_values(true, false);
                        }
                    }

                    next := ShadowedButton {
                        enabled: (audio_playback || input_playback) && (!recording || !input_recording);
                        min-width: 100px;
    
                        HorizontalLayout {
                            padding: 12px;
                            alignment: center;

                            StatusImageLarge {
                                source: @image-url("icons/next.svg");
                                colorize: next.enabled ? white : generic_disabled;

                                animate colorize {
                                    duration: 0.1s;
                                }
                            }
                        }

                        clicked => {
                            skip(true, true);
                            sync_current_dial_values_with_recording_values();
                        }
                    }
                }

                HorizontalLayout {
                    spacing: 12px;

                    input_capturer := ShadowedButton {
                        enabled: !recording && !audio_or_input_playback && !input_recording_timeout;
        
                        HorizontalLayout {
                            padding: 12px;
                            alignment: center;

                            if input_recording:
                            StatusImageLarge {
                                source: @image-url("icons/stop-circle.svg");
                                colorize: input_capturer.enabled ? input_playback_colour : input_playback_disabled;
                            }

                            if !input_recording:
                            StatusImageLarge {
                                source: @image-url("icons/circle.svg");
                                colorize: input_capturer.enabled ? input_playback_colour : input_playback_disabled;
                            }
                        }
    
                        clicked => {
                            input_recording = !input_recording;
                            if input_recording {
                                disable_buttons_on_record();
                                input_playback = true;
                                play_pause();
                            } else {
                                current_dial_values = dial_values_when_locked[current_recording];
                                save_dial_edits();
                                input_playback = false;
                                play_pause();
                            }
                            input_recording_timeout = true;
                        }
                    }

                    recorder := ShadowedButton {
                        enabled: !input_recording && !audio_or_input_playback && !recording_timeout;
        
                        HorizontalLayout {
                            padding: 12px;
                            alignment: center;

                            if recording:
                            StatusImageLarge {
                                source: @image-url("icons/stop-circle.svg");
                                colorize: recorder.enabled ? play_and_record_colour : play_and_record_disabled;
                            }

                            if !recording:
                            StatusImageLarge {
                                source: @image-url("icons/circle.svg");
                                colorize: recorder.enabled ? play_and_record_colour : play_and_record_disabled;
                            }
                        }
    
                        clicked => {
                            recording = !recording;
                            if recording {
                                disable_buttons_on_record();
                            } else {
                                new_recording = true;
                            }
                            recording_timeout = true;
                            record();
                        }
                    }
                }
            }
        }
    }
}
